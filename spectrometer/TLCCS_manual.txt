
                      Thorlabs CCS VISA Instrument Driver
________________________________________________________________________________

  Introduction:

  This instrument driver provides programming support for Thorlabs CCS VISA Instrument Driver.
  It contains functions for opening, configuring, taking measurements from, and
  closing the instrument.

________________________________________________________________________________

  Assumptions:

  To successfully use this module, the following conditions must be met:

  For GPIB instrument drivers:
         -  the instrument is connected to the GPIB.
         -  the GPIB address supplied to the initialize function must match the
            GPIB address of the instrument.

  For VXI instrument drivers:
         -  the instrument is installed in the VXI mainframe and you are
            using one of the following controller options:
                  Embedded controller
                  MXI
                  MXI2
                  GPIB-VXI
         -  the logical address supplied to the initialize function must
            match the logical address of the instrument.

  For RS-232 instrument drivers:
         -  the instrument is connected to the RS-232 interface.
         -  the COM port, baud rate, parity, and timeout supplied to the
            initialize function must match the settings of the instrument.

________________________________________________________________________________

  Error and Status Information:

  Each function in this instrument driver returns a status code that
  either indicates success or describes an error or warning condition.
  Your program should examine the status code from each call to an
  instrument driver function to determine if an error occurred.
  The general meaning of the status code is as follows:

       Value                  Meaning
       -------------------------------
       0                      Success
       Positive Values        Warnings
       Negative Values        Errors

  The description of each instrument driver function lists possible error
  codes and their meanings

________________________________________________________________________________

  How To Use This Document:

  Use this document as a programming reference manual.
  It describes each function in the

                      Thorlabs CCS VISA Instrument Driver

  instrument.  The functions appear in alphabetical order, with a description
  of the function and its C syntax, a description of each parameter, and a list
  of possible error codes.

________________________________________________________________________________

Function Tree Layout:

   Class/Panel Name:                           Function Name:

      Initialize                               tlccs_init
      Configuration Functions
         Set Integration Time                  tlccs_setIntegrationTime
         Get Integration Time                  tlccs_getIntegrationTime
      Action/Status Functions
         Start Scan                            tlccs_startScan
         Start Scan Continuous                 tlccs_startScanCont
         Start Ext Triggered Scan              tlccs_startScanExtTrg
         Start Scan Continuous Ext. Trigger    tlccs_startScanContExtTrg
         Get Device Status                     tlccs_getDeviceStatus
      Data Functions
         Get Scan Data                         tlccs_getScanData
         Get Raw Scan Data                     tlccs_getRawScanData
         Set Wavelength Data                   tlccs_setWavelengthData
         Get Wavelength Data                   tlccs_getWavelengthData
         Get User Calibration Points           tlccs_getUserCalibrationPoints
         Set Amplitude Data                    tlccs_setAmplitudeData
         Get Amplitude Data                    tlccs_getAmplitudeData
      Utility Functions
         Identification Query                  tlccs_identificationQuery
         Revision Query                        tlccs_revisionQuery
         Reset                                 tlccs_reset
         Self-Test                             tlccs_selfTest
         Error Query                           tlccs_errorQuery
         Error Message                         tlccs_errorMessage
         Set User Text                         tlccs_setUserText
         Get User Text                         tlccs_getUserText
         Set Attribute                         tlccs_setAttribute
         Get Attribute                         tlccs_getAttribute
      Close                                    tlccs_close
________________________________________________________________________________

  Thorlabs CCS VISA Instrument Driver

      This instrument driver module provides programming support for the
      THORLABS CCS Series Spectrometer instruments.
      
      LICENSE:
      
      This software is Copyright ï¿½ 20013, Thorlabs.
      
      This library is free software; you can redistribute it and/or modify it
      under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation; either version 2.1 of the License, or (at
      your option) any later version.
      
      This library is distributed in the hope that it will be useful, but
      WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
      General Public License for more details.
      
      You should have received a copy of the GNU Lesser General Public License
      along with this library; if not, write to the Free Software Foundation,
      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
      
________________________________________________________________________________

              The following functions are in alphabetical order.

________________________________________________________________________________

  tlccs_close

      ViStatus tlccs_close (ViSession instrumentHandle);

  Purpose

      This function closes the instrument driver session.
      
      Note: The instrument must be reinitialized to use it again.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_errorMessage

      ViStatus tlccs_errorMessage (ViSession instrumentHandle,
                                   ViStatus statusCode,
                                   ViChar _VI_FAR description[]);

  Purpose

      This function takes the error code returned by the instrument driver
      functions interprets it and returns it as an user readable string.
      
      Status/error codes and description:
      
      --- Instrument Driver Errors and Warnings ---
      Status      Description
      -------------------------------------------------
               0  No error (the call was successful).
      0x3FFF0085  Unknown Status Code     - VI_WARN_UNKNOWN_STATUS
      0x3FFC0901  WARNING: Value overflow - VI_INSTR_WARN_OVERFLOW
      0x3FFC0902  WARNING: Value underrun - VI_INSTR_WARN_UNDERRUN
      0x3FFC0903  WARNING: Value is NaN   - VI_INSTR_WARN_NAN
      0xBFFC0001  Parameter 1 out of range.
      0xBFFC0002  Parameter 2 out of range.
      0xBFFC0003  Parameter 3 out of range.
      0xBFFC0004  Parameter 4 out of range.
      0xBFFC0005  Parameter 5 out of range.
      0xBFFC0006  Parameter 6 out of range.
      0xBFFC0007  Parameter 7 out of range.
      0xBFFC0008  Parameter 8 out of range.
      0xBFFC0012  Error Interpreting instrument response.
      
      --- Instrument Errors ---
      Range: 0xBFFC0700 .. 0xBFFC0CFF.
      Calculation: Device error code + 0xBFFC0900.
      Please see your device documentation for details.
      
      --- VISA Errors ---
      Please see your VISA documentation for details.
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session. You may pass
          VI_NULL.
          
          Note: If VI_NULL is passed to this parameter it is not possible to
          get device specific messages.

      statusCode

          Variable Type       ViStatus

          This parameter accepts the error codes returned from the instrument
          driver functions.
          
          Default Value: 0 - VI_SUCCESS

      description

          Variable Type       ViChar[]

          This parameter returns the interpreted code as an user readable
          message string.
          
          Notes:
          (1) The array must contain at least 512 elements ViChar[512].
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_errorQuery

      ViStatus tlccs_errorQuery (ViSession instrumentHandle,
                                 ViPInt32 errorNumber,
                                 ViChar _VI_FAR errorMessage[]);

  Purpose

      This function queries the instrument's error queue manually.
      Use this function to query the instrument's error queue if the driver's
      error query mode is set to manual query.
      
      Note: The returned values are stored in the drivers error store. You may
      use <Error Message> to get a descriptive text at a later point of time.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      errorNumber

          Variable Type       ViInt32 (passed by reference)

          This parameter returns the instrument error number.
          
          Note: You may pass VI_NULL if you don't need this value.
          

      errorMessage

          Variable Type       ViChar[]

          This parameter returns the instrument error message.
          
          Notes: The array must contain at least 256 elements ViChar[256].
          You may pass VI_NULL if you do not need this value.
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_getAmplitudeData

      ViStatus tlccs_getAmplitudeData (ViSession instrumentHandle,
                                       ViReal64 _VI_FAR amplitudeCorrectionFactors[],
                                       ViInt32 bufferStart,
                                       ViInt32 bufferLength, ViInt32 mode);

  Purpose

      This function returns data for the user-defined amplitude correction
      factors.
      
      Note:
      The value returned in Amplitude_Correction_Factors[0] is the amplitude
      correction factor at pixel 1, the value returned in
      Amplitude_Correction_Factors[1] is the amplitude correction factor at
      pixel 2 and so on until
      Amplitude_Correction_Factors[CCS_SERIES_NUM_PIXELS-1] which provides the
      amplitude correction factor at pixel CCS_SERIES_NUM_PIXELS (3648).
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      amplitudeCorrectionFactors

          Variable Type       ViReal64[]

          This parameter accepts the amplitude correction factor array.
          
          Note:
          The array must be at least of Buffer Length size
          

      bufferStart

          Variable Type       ViInt32

          This parameter is the start index for the amplitude correction factor
          array. From this point on the data stored in the user amplitude
          correction factor array will be stored in the parameter
          Amplitude_Correction_Factors[].
          
          
          Note:
          This value has to be in the range of
          0 to CCS_SERIES_NUM_PIXELS - 1 (3647).
          The sum of this parameter and the parameter Buffer_Length must not
          exceed CCS_SERIES_NUM_PIXELS (3648).
          

      bufferLength

          Variable Type       ViInt32

          This parameter indicates the length of the amplitude correction
          factor array. Buffer length values from given parameter
          Amplitude_Correction_Factors[] will replace the data stored in the
          user amplitude correction factor array.
          
          
          Note:
          This value has to be in the range of 1 to CCS_SERIES_NUM_PIXELS
          (3648). The sum of this parameter and the parameter Buffer Start must
          not exceed CCS_SERIES_NUM_PIXELS (3648).
          

      mode

          Variable Type       ViInt32

          This parameter indicates the mode of getting the amplitude correction
          factor array.
          
          If mode is set to ACOR_FROM_CURRENT (1) the data will be retrieved
          from the currently used amplitude correction factors.
          
          If mode is set to ACOR_FROM_NVMEM (2) the data will be read out from
          the device's non volatile memory and additionally applied to the
          current measurements.
          
          
          Note:
          If mode is set to any other value the function will return error
          VI_ERROR_INV_PARAMETER (0xBFFF0078).
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_getAttribute

      ViStatus tlccs_getAttribute (ViSession instrumentHandle,
                                   ViAttr attribute, ViPAttrState value);

  Purpose

      Queries a specified attribute for the given instrument session.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      attribute

          Variable Type       ViAttr

          Specifies the attribute whose value you want to query.
          
          Attributes:
          
          CCS_SERIES_ATTR_USER_DATA
          Description:  This attribute value is the data used privately by the
          application for a particular session. This data is not used by the
          instrument driver for any purposes. It is provided to the application
          for its own use.
          
          CCS_SERIES_ATTR_CAL_MODE
          Description:  This attribute value returns either
          CCS_SERIES_CAL_MODE_USER (0) or CCS_SERIES_CAL_MODE_THORLABS (1).
          This shows whether the amplitude correction data set by function
          CCSseries_setAmplitudeData() or read by function
          CCSseries_getAmplitudeData() is data provided by the user or provided
          by THORLABS.

      value

          Variable Type       ViAttrState (passed by reference)

          The value of the specified attribute.

  Return Value

          This value shows the status code returned by the function call.
          
          For Status Codes see function <Error Message>.
          
________________________________________________________________________________

  tlccs_getDeviceStatus

      ViStatus tlccs_getDeviceStatus (ViSession instrumentHandle,
                                      ViPInt32 deviceStatus);

  Purpose

      This function retrieves the status of the CCS. You can use this function
      to detect if an external trigger has already occurred.
      
      Note:
      The values anove are defined in the drivers header file.
      
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      deviceStatus

          Variable Type       ViInt32 (passed by reference)

          This parameter returns the instruments status (4 bytes).
          You can mask out the relevant status bits.
          
          // CCS waits for new scan to execute
          CCS_SERIES_STATUS_SCAN_IDLE            0x0002
          
          // scan in progress
          CCS_SERIES_STATUS_SCAN_TRIGGERED       0x0004
          
          // scan starting
          CCS_SERIES_STATUS_SCAN_START_TRANS     0x0008
          
          // scan is done, waiting for data transfer to PC
          CCS_SERIES_STATUS_SCAN_TRANSFER        0x0010
          
          // same as IDLE except that external trigger is armed
          CCS_SERIES_STATUS_WAIT_FOR_EXT_TRIG    0x0080

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_getIntegrationTime

      ViStatus tlccs_getIntegrationTime (ViSession instrumentHandle,
                                         ViPReal64 integrationTimes);

  Purpose

      This function queries the integration time.
      
      Note:
      The value this function returns is (reverse) calculated from discrete
      timer counter values of the CCS and may therfore slightly differ from the
      value set with the function 'Set Interagtion Time'.
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      integrationTimes

          Variable Type       ViReal64 (passed by reference)

          This parameter returns the optical integration time in seconds [s].
          
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_getRawScanData

      ViStatus tlccs_getRawScanData (ViSession instrumentHandle,
                                     ViInt32 _VI_FAR scanDataArray[]);

  Purpose

      This function gets data of one scan.
      
      Note:
      In external triggered mode, when you issue this command before the CCS
      was triggered you will get a timeout error.
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      scanDataArray

          Variable Type       ViInt32[]

          This parameter returns the unprocessed scanned data. The values
          represent the AD converted values.
          
          
          Note:
          The array must contain at least CCS_SERIES_NUM_RAW_PIXELS (3694)
          elements (ViUInt16[CCS_SERIES_NUM_RAW_PIXELS]).
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_getScanData

      ViStatus tlccs_getScanData (ViSession instrumentHandle,
                                  ViReal64 _VI_FAR data[]);

  Purpose

      This function reads out the processed scan data.
      
      Note:
      When the raw scan data is overexposed, so that a proper data processing
      is not possible, the function returns
      
      VI_ERROR_SCAN_DATA_INVALID
      
      and all data points are set to zero (0.0).
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      data

          Variable Type       ViReal64[]

          This parameter returns the processed scan data.
          
          Note:
          The array must contain at least CCS_SERIES_NUM_PIXELS (3648) elements
          (ViReal64[CCS_SERIES_NUM_PIXELS]).

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_getUserCalibrationPoints

      ViStatus tlccs_getUserCalibrationPoints (ViSession instrumentHandle,
                                               ViInt32 _VI_FAR pixelDataArray[],
                                               ViReal64 _VI_FAR wavelengthDataArray[],
                                               ViPInt32 bufferLength);

  Purpose

      This function returns the user-defined pixel-wavelength correlation
      supporting points. These given data pair arrays are used by the driver to
      interpolate the pixel-wavelength correlation array returned by the
      CCSseries_getWavelengthData function.
      
      Note:
      If you do not need either of these values you may pass NULL.
      The function returns with error VI_ERROR_CCS_SERIES_NO_USER_DATA if no
      user calibration data is present in the instrument's nonvolatile memory.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      pixelDataArray

          Variable Type       ViInt32[]

          This parameter will receive the pixel values of the user-defined
          pixel/wavelength data pairs.
          
          
          Note:
          The array must contain CCS_SERIES_MAX_NUM_USR_ADJ (10) elements.
          You may pass NULL.

      wavelengthDataArray

          Variable Type       ViReal64[]

          This parameter will receive the wavelength values of the user-defined
          pixel/wavelength data pairs.
          
          
          Note:
          The array must contain CCS_SERIES_MAX_NUM_USR_ADJ (10) elements.
          You may pass NULL.

      bufferLength

          Variable Type       ViInt32 (passed by reference)

          This parameter receives the number of elements in the Pixel Data
          Array and the Wavelength Data Array.
          
          Note:
          You may pass NULL. In case no user calibration data is present the
          parameter will be set to 0.

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_getUserText

      ViStatus tlccs_getUserText (ViSession instrumentHandle,
                                  ViChar _VI_FAR userText[]);

  Purpose

      This function receives a user defined text stored in the nonvolatile
      memory of the CCS.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      userText

          Variable Type       ViChar[]

          This parameter returns a user defined string.
          
          Note:
          The buffer must contain at least CCS_SERIES_MAX_USER_NAME_SIZE (32)
          elements (ViChar[CCS_SERIES_MAX_USER_NAME_SIZE]).
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_getWavelengthData

      ViStatus tlccs_getWavelengthData (ViSession instrumentHandle,
                                        ViInt16 dataSet,
                                        ViReal64 _VI_FAR wavelengthDataArray[],
                                        ViPReal64 minimumWavelength,
                                        ViPReal64 maximumWavelength);

  Purpose

      This function returns data for the pixel-wavelength correlation.
      The maximum and the minimum wavelength are additionally provided in two
      separate return values.
      
      Note:
      If you do not need either of these values you may pass NULL.
      
      
      The value returned in Wavelength_Data_Array[0] is the wavelength at pixel
      1, this is also the minimum wavelength, the value returned in
      Wavelength_Data_Array[1] is the wavelength at pixel 2 and so on until
      Wavelength_Data_Array[CCS_SERIES_NUM_PIXELS-1] which provides the
      wavelength at pixel CCS_SERIES_NUM_PIXELS (3648). This is the maximum
      wavelength.
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      dataSet

          Variable Type       ViInt16

          This parameter specifies which calibration data set has to be used
          for generating the wavelength data array.
          
          Values:
          CCS_SERIES_CAL_DATA_SET_FACTORY (0) - Use factory adjustment data to
          generate the wavelength data array.
          
          CCS_SERIES_CAL_DATA_SET_USER (1) - Use user-defined adjustment data
          to generate the wavelength data array. (see also function
          CCSseries_setWavelengthData)

      wavelengthDataArray

          Variable Type       ViReal64[]

          This parameter returns the wavelength data.
          
          
          Note:
          The array must contain at least CCS_SERIES_NUM_PIXELS (3648) elements
          (ViReal64[CCS_SERIES_NUM_PIXELS]). If you do not need the array you
          may pass NULL for this parameter.
          

      minimumWavelength

          Variable Type       ViReal64 (passed by reference)

          This parameter returns the minimum wavelength in nanometers (nm). It
          is the same value as returned in Wavelength Data Array position 0.
          
          
          Note:
          You mas pass NULL for this parameter..
          

      maximumWavelength

          Variable Type       ViReal64 (passed by reference)

          This parameter returns the maximum wavelength in nanometers (nm). It
          is the same value as returned in Wavelength Data Array position
          CCS_SERIES_NUM_PIXELS - 1 (3647).
          
          
          Note:
          You mas pass NULL for this parameter..
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_identificationQuery

      ViStatus tlccs_identificationQuery (ViSession instrumentHandle,
                                          ViChar _VI_FAR manufacturerName[],
                                          ViChar _VI_FAR deviceName[],
                                          ViChar _VI_FAR serialNumber[],
                                          ViChar _VI_FAR firmwareRevision[],
                                          ViChar _VI_FAR instrumentDriverRevision[]);

  Purpose

      This function returns the device identification information.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      manufacturerName

          Variable Type       ViChar[]

          This parameter returns the manufacturer name.
          
          Notes:
          (1) The array must contain at least 256 elements ViChar[256].
          (2) You may pass VI_NULL if you do not need this value.
          

      deviceName

          Variable Type       ViChar[]

          This parameter returns the device name.
          
          Notes:
          (1) The array must contain at least 256 elements ViChar[256].
          (2) You may pass VI_NULL if you do not need this value.
          

      serialNumber

          Variable Type       ViChar[]

          This parameter returns the device serial number.
          
          Notes:
          (1) The array must contain at least 256 elements ViChar[256].
          (2) You may pass VI_NULL if you do not need this value.
          

      firmwareRevision

          Variable Type       ViChar[]

          This parameter returns the device firmware revision.
          
          Notes:
          (1) The array must contain at least 256 elements ViChar[256].
          (2) You may pass VI_NULL if you do not need this value.
          

      instrumentDriverRevision

          Variable Type       ViChar[]

          This parameter returns the driver revision.
          
          Notes:
          (1) The array must contain at least 256 elements ViChar[256].
          (2) You may pass VI_NULL if you do not need this value.
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_init

      ViStatus tlccs_init (ViRsrc resourceName, ViBoolean IDQuery,
                           ViBoolean resetDevice,
                           ViPSession instrumentHandle);

  Purpose

      This function initializes the instrument driver session and performs the
      following initialization actions:
      
      (1) Opens a session to the Default Resource Manager resource and a
      session to the specified device using the Resource Name  specified.
      (2) Performs an identification query on the instrument.
      (3) Resets the instrument to a known state.
      (4) Sends initialization commands to the instrument.
      (5) Returns an instrument handle which is used to distinguish between
      different sessions of this instrument driver.
      
      Notes:
      (1) Each time this function is invoked a unique session is opened.

  Parameter List

      resourceName

          Variable Type       ViRsrc

          This parameter specifies the device that is to be initialized
          (Resource Name). The syntax for this parameter is shown below.
          
          "USB0::0x1313::0x8080::DEVICE-SERIAL-NUMBER::RAW"
          
          For remote VISA sessions use.
          "VISA://HOSTNAME[:PORT]/USB0::0x1313::0x8080::DEVICE-SERIAL-NUMBER::
          RAW".
          Where HOSTNAME is the name of the machine running the VISA server and
          PORT is the TCP port of the VISA server.
          
          Notes:
          (1) You may use VISA <Find Resources> to get the Resource Name for
          your device. Use "USB?*INSTR{VI_ATTR_MANF_ID==0x1313 &&
          VI_ATTR_MODEL_CODE==0x8080}" as a search string for <Find Resources>.
          

      IDQuery

          Variable Type       ViBoolean

          This parameter specifies whether an identification query is performed
          during the initialization process.
          
          VI_OFF (0): Skip query.
          VI_ON  (1): Do query (default).
          

      resetDevice

          Variable Type       ViBoolean

          This parameter specifies whether the instrument is reset during the
          initialization process.
          
          VI_OFF (0) - no reset
          VI_ON  (1) - instrument is reset (default)
          

      instrumentHandle

          Variable Type       ViSession (passed by reference)

          This parameter returns an instrument handle that is used in all
          subsequent calls to distinguish between different sessions of this
          instrument driver.

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_reset

      ViStatus tlccs_reset (ViSession instrumentHandle);

  Purpose

      This function resets the device.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_revisionQuery

      ViStatus tlccs_revisionQuery (ViSession instrumentHandle,
                                    ViChar _VI_FAR instrumentDriverRevision[],
                                    ViChar _VI_FAR firmwareRevision[]);

  Purpose

      This function returns the revision numbers of the instrument driver and
      the device firmware.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session. You may pass
          VI_NULL.
          
          Note: If you pass VI_NULL an empty string will be returned for the
          firmware revision parameter.

      instrumentDriverRevision

          Variable Type       ViChar[]

          This parameter returns the instrument driver revision.
          
          Notes:
          (1) The 32 bits of revision are divided into 12 bits for major
          revision (MSB), 12 bits for minor revision and 8 bits for subminor
          revision (LSB). You can use the macros provided in the header file to
          extract major, minor, subminor from the revision provided here.
          
          RevMajor    = CCS_SERIES_EXTRACT_MAJOR(revision);
          RevMinor    = CCS_SERIES_EXTRACT_MINOR(revision);
          RevSubminor = CCS_SERIES_EXTRACT_SUBMINOR(revision);
          
          (2) You may pass VI_NULL if you do not need this value.
          

      firmwareRevision

          Variable Type       ViChar[]

          This parameter returns the instrument firmware revision.
          
          Notes:
          (1) The 32 bits of revision are divided into 12 bits for major
          revision (MSB), 12 bits for minor revision and 8 bits for subminor
          revision (LSB). You can use the macros provided in the header file to
          extract major, minor, subminor from the revision provided here.
          
          RevMajor    = CCS_SERIES_EXTRACT_MAJOR(revision);
          RevMinor    = CCS_SERIES_EXTRACT_MINOR(revision);
          RevSubminor = CCS_SERIES_EXTRACT_SUBMINOR(revision);
          
          (2) You may pass VI_NULL if you do not need this value.
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_selfTest

      ViStatus tlccs_selfTest (ViSession instrumentHandle,
                               ViPInt16 selfTestResult,
                               ViChar _VI_FAR selfTestMessage[]);

  Purpose

      This function runs the device self test routine and returns the test
      result.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      selfTestResult

          Variable Type       ViInt16 (passed by reference)

          This parameter contains the value returned from the device self test
          routine. A returned zero value indicates a successful run, a value
          other than zero indicates failure.

      selfTestMessage

          Variable Type       ViChar[]

          This parameter returns the instrument's self test message.
          
          Notes: The array must contain at least 256 elements ViChar[256].
          You may pass VI_NULL if you do not need this value.
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_setAmplitudeData

      ViStatus tlccs_setAmplitudeData (ViSession instrumentHandle,
                                       ViReal64 _VI_FAR amplitudeCorrectionFactors[],
                                       ViInt32 bufferLength,
                                       ViInt32 bufferStart, ViInt32 mode);

  Purpose

      This function stores data for user-defined pixel-amplitude correction
      factors to the instrument's nonvolatile memory.
      
      The factor array can be used to correct the amplitudes of each pixel
      returned by the CCSseries_getScanData function.
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      amplitudeCorrectionFactors

          Variable Type       ViReal64[]

          This parameter accepts the amplitude correction factor array.
          
          Note:
          The array must be at least of Buffer Length size
          

      bufferLength

          Variable Type       ViInt32

          This parameter indicates the length of the amplitude correction
          factor array. Buffer Length values from given parameter
          Amplitude_Correction_Factors[] will replace the data stored in the
          user amplitude correction factor array.
          
          
          Note:
          This value has to be in the range of 1 to CCS_SERIES_NUM_PIXELS
          (3648). The sum of this parameter and the parameter Buffer Start must
          not exceed CCS_SERIES_NUM_PIXELS (3648).
          

      bufferStart

          Variable Type       ViInt32

          This parameter is the start index for the amplitude correction factor
          array. From this point on the data given in the parameter
          Amplitude_Correction_Factors[] will replace the data stored in the
          user amplitude correction factor array.
          
          
          Note:
          This value has to be in the range of
          0 to CCS_SERIES_NUM_PIXELS  - 1 (3647).
          The sum of this parameter and the parameter Buffer_Length must not
          exceed CCS_SERIES_NUM_PIXELS (3648).
          

      mode

          Variable Type       ViInt32

          This parameter indicates the mode of setting the amplitude correction
          factor array.
          
          If mode is set to ACOR_APPLY_TO_MEAS (1) the data will be applied for
          the current measurements but will not go into the device's non
          volatile memory.
          
          If mode is set to ACOR_APPLY_TO_MEAS_NVMEM (2) the data will be
          applied to the current measurements and will be additionally stored
          in the device's non volatile memory.
          
          
          Note:
          If mode is set to any other value the function will return error
          VI_ERROR_INV_PARAMETER (0xBFFF0078).
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_setAttribute

      ViStatus tlccs_setAttribute (ViSession instrumentHandle,
                                   ViAttr attribute, ViAttrState value);

  Purpose

      Sets a specified attribute for the given instrument session.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      attribute

          Variable Type       ViAttr

          Specifies the attribute whose value you want to set.
          
          Attributes:
          
          CCS_SERIES_ATTR_USER_DATA
          Description:  This attribute value is the data used privately by the
          application for a particular session. This data is not used by the
          instrument driver for any purposes. It is provided to the application
          for its own use.
          

      value

          Variable Type       ViAttrState

          The value to which to set the specified attribute.

  Return Value

          This value shows the status code returned by the function call.
          
          For Status Codes see function <Error Message>.
          
________________________________________________________________________________

  tlccs_setIntegrationTime

      ViStatus tlccs_setIntegrationTime (ViSession instrumentHandle,
                                         ViReal64 integrationTimes);

  Purpose

      This function sets the optical integration time in seconds [s].

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      integrationTimes

          Variable Type       ViReal64

          This parameter accepts the optical integration time for the CCS in
          seconds [s].
          
          Valid range:   CCS_SERIES_MIN_INT_TIME (1.0E-5) ...
                         CCS_SERIES_MAX_INT_TIME (6.0E+1)
          
          Default value: 1.0E-3.
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_setUserText

      ViStatus tlccs_setUserText (ViSession instrumentHandle,
                                  ViChar _VI_FAR userText[]);

  Purpose

      This function transfers a user definable text and saves it in the
      nonvolatile memory of the CCS.
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      userText

          Variable Type       ViChar[]

          This parameter specifies a user definable string.
          
          Note:
          The string will be truncated to CCS_SERIES_MAX_USER_NAME_SIZE-1 (31)
          characters. The number of characters stored in the CCS is always
          CCS_SERIES_MAX_USER_NAME_SIZE (32), the last character stored is
          always the NUL character.
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_setWavelengthData

      ViStatus tlccs_setWavelengthData (ViSession instrumentHandle,
                                        ViInt32 _VI_FAR pixelDataArray[],
                                        ViReal64 _VI_FAR wavelengthDataArray[],
                                        ViInt32 bufferLength);

  Purpose

      This function stores data for user-defined pixel-wavelength correlation
      to the instrument's nonvolatile memory.
      
      The given data pair arrays are used to interpolate the pixel-wavelength
      correlation array returned by the CCSseries_getWavelengthData function.
      
      Note: In case the interpolated pixel-wavelength correlation contains
      negative values, or the values are not strictly increasing the function
      returns with error VI_ERROR_INV_USER_DATA.
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

      pixelDataArray

          Variable Type       ViInt32[]

          This parameter accepts the pixel values of the pixel/wavelength data
          pairs. The valid range for pixel values is from 0 up to
          CCS_SERIES_NUM_PIXEL - 1 (3647).
          
          
          Note:
          The array must contain at least CCS_SERIES_MIN_NUM_USR_ADJ (4)
          elements and at most CCS_SERIES_MAX_NUM_USR_ADJ (10) elements.
          
          

      wavelengthDataArray

          Variable Type       ViReal64[]

          This parameter accepts the wavelength values of the pixel/wavelength
          data pairs in nm. The wavelength value has to be positive.
          
          
          Note:
          The array must contain at least CCS_SERIES_MIN_NUM_USR_ADJ (4)
          elements and at most CCS_SERIES_MAX_NUM_USR_ADJ (10) elements.
          

      bufferLength

          Variable Type       ViInt32

          This parameter accepts the number of elements in the Pixel Data Array
          and the Wavelength Data Array.
          
          Note:
          This value has to be at least CCS_SERIES_MIN_NUM_USR_ADJ (4) and at
          most CCS_SERIES_MAX_NUM_USR_ADJ (10).
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_startScan

      ViStatus tlccs_startScan (ViSession instrumentHandle);

  Purpose

      This function triggers the the CCS to take one single scan.
      
      Note:
      The scan data can be read out with the function 'Get Scan Data'
      Use 'Get Device Status' to check the scan status.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.
          

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_startScanCont

      ViStatus tlccs_startScanCont (ViSession instrumentHandle);

  Purpose

      This function starts the CCS scanning continuously. Any other function
      except 'Get Scan Data' and 'Get Device Status' will stop the scanning.
      
      Note:
      The scan data can be read out with the function 'Get Scan Data'
      Use 'Get Device Status' to check the scan status.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_startScanContExtTrg

      ViStatus tlccs_startScanContExtTrg (ViSession instrumentHandle);

  Purpose

      This function arms the CCS for scanning after an external trigger. A
      following low to high transition at the trigger input of the CCS then
      starts a scan. The CCS will rearm immediately after the scan data is
      readout. Any other function except 'Get Scan Data' or 'Get Device Status'
      will stop the scanning.
      
      Note:
      The scan data can be read out with the function 'Get Scan Data'
      
      
      Note:
      When you issue a read command 'Get Scan Data' before the CCS was
      triggered you will get a timeout error. Use 'Get Device Status' to check
      the scan status.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.
________________________________________________________________________________

  tlccs_startScanExtTrg

      ViStatus tlccs_startScanExtTrg (ViSession instrumentHandle);

  Purpose

      This function arms the external trigger of the CCS. A following low to
      high transition at the trigger input of the CCS starts a scan.
      
      Note:
      When you issue a read command 'Get Scan Data' before the CCS was
      triggered you will get a timeout error. Use 'Get Device Status' to check
      the scan status.
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          This parameter accepts the instrument handle returned by <Initialize>
          to select the desired instrument driver session.

  Return Value

          This is the error code returned by the function call. For error codes
          and descriptions see <Error Message>.

